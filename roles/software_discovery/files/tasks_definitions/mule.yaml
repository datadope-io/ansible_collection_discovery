- name: Get home regex
  set_instance_fact:
    _home_regex: "<< __instance__.process.cmdline | regex_search('-Dmule\\.home=\"*?(.+?)\"*?\\ ', '\\1' ,ignorecase=True) | first >>"
  ignore_errors: yes
- name: Get home
  block:
    - name: Save home 1
      set_instance_fact:
        _home: "<<__instance__._home_regex>>"
      when:
        - "__instance__._home_regex[0] == '/'"
    - name: Save home 2
      set_instance_fact:
        _home: "<< (env_vars.parsed.PWD, __instance__._home_regex) | datadope.discovery.path_join | realpath >>"
      when:
        - "__instance__._home_regex[0] != '/'"
        - env_vars.parsed.PWD is defined
  when:
    - __instance__._home_regex is defined

- name: Get base regex
  set_instance_fact:
    _base_regex: "<< __instance__.process.cmdline | regex_search('-Dmule\\.base=\"*?(.+?)\"*?\\ ', '\\1' ,ignorecase=True) | first >>"
  ignore_errors: yes
- name: Get base
  block:
    - name: Save base 1
      set_instance_fact:
        _base: "<<__instance__._base_regex>>"
      when:
        - "__instance__._base_regex[0] == '/'"
    - name: Save base 2
      set_instance_fact:
        _base: "<< (env_vars.parsed.PWD, __instance__._base_regex) | datadope.discovery.path_join | realpath >>"
      when:
        - "__instance__._base_regex[0] != '/'"
        - env_vars.parsed.PWD is defined
  when:
    - __instance__._base_regex is defined

- name: Parse config
  block:
    - name: Set _wrapper_conf
      set_instance_fact:
        _wrapper_conf: "<< (__instance__._home, 'conf/wrapper.conf') | datadope.discovery.path_join >>"
    - name: Check if _wrapper_conf is accessible
      stat:
        path: "<< __instance__._wrapper_conf>>"
      register: result_conf
    - name: Access and process conf file
      block:
        - name: Access conf file
          read_remote_file:
            file_path: "<< __instance__._wrapper_conf>>"
          register: _conf_file
        - name: Iterate and save conf file lines
          block:
            - name: Split conf line
              set_instance_fact:
                _splitted_conf_line: "<< __item__.split('=', 1) >>"
            - name: Store conf line
              set_instance_fact:
                _parsed_conf_file: "<< __instance__._parsed_conf_file | default({}) | combine({
                  __instance__._splitted_conf_line[0] | trim : __instance__._splitted_conf_line[1] | default('') | trim
                })>>"
            - name: Store arg if necessary
              set_instance_fact:
                _parsed_args: "<< __instance__._parsed_args | default({}) | combine({
                  _splitted_arg[0] | trim : _splitted_arg[1] | default('') | trim
                })>>"
              vars:
                _splitted_arg: "<< __instance__._splitted_conf_line[1].split('=', 1) >>"
              when:
                - __item__.startswith('wrapper.java.additional.')
                - __instance__._splitted_conf_line[0][-1].isdigit()
          when:
            - not __item__.startswith('#')
            - "'=' in __item__"
          loop: "<< _conf_file.content.splitlines() >>"
        - name: Save config file
          set_instance_fact:
            configuration: "<< __instance__._parsed_conf_file>>"
        - name: Save parsed args if necessary
          set_instance_fact:
            extra_data: "<< __instance__.extra_data | default({}) | combine({
              'parsed_args' : __instance__._parsed_args
            })>>"
          when: __instance__._parsed_args is defined
      ignore_errors: yes
      when:
        - result_conf is not failed
  when:
    - __instance__._home is defined

- name: Set home in files
  add_file_info:
    path: <<__instance__._home>>
    type: 'config'
    subtype: 'home'
  when: __instance__._home is defined

- name: Set base in files
  add_file_info:
    path: <<__instance__._base>>
    type: 'config'
    subtype: 'base'
  when: __instance__._base is defined

- name: Remove temporary vars
  del_instance_fact:
    - _home_regex
    - _base_regex
    - _wrapper_conf
    - _splitted_conf_line
    - _parsed_conf_file
    - _parsed_args
    - _home
    - _base