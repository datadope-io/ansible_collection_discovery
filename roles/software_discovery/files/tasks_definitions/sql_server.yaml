---
- name: Gather Databases
  block:
    - name: Get hostname
      run_module:
        ansible.windows.win_shell:
         _raw_params: "hostname"
      register: result
      ignore_errors: yes
    - name: Format hostname
      set_instance_fact:
        _hostname: "<< result.stdout_lines | first >>"
      when: result is not failed
    - name: Get instance
      set_instance_fact:
        _instance: "<< __instance__.process.cmdline | regex_search('sqlservr.exe.*\\s-s([^\\s]*)', '\\1', ignorecase=True) | first  >>"
      ignore_errors: yes
    - name: Add instances to extra data
      set_instance_fact:
        extra_data: "<< __instance__.extra_data | default({}) | combine({
              'instance' : __instance__._instance
            }) >>"
    - name: Get databases of instance
      run_module:
        ansible.windows.win_shell:
          _raw_params: "Get-SqlDatabase -ServerInstance '<< __instance__._hostname >>\\<< __instance__._instance >>'  | Select -ExpandProperty Name"
      register: result
    - name: Add databases if needed
      block:
        - name: Add databases
          set_instance_fact:
            _databases: >-
              << _databases | default([]) | union(__databases__ | sort) >>
      vars:
        __databases__: << result.stdout_lines | default([]) | difference(ignore_databases | default([])) >>
      when:
        - result is not failed
    - name: Add databases to extra data
      set_instance_fact:
        extra_data: "<< __instance__.extra_data | default({}) | combine({
          'databases': __instance__._databases | sort
        }) >>"
      when: __instance__._databases is defined

- name: Gather cluster information
  block:
    - name: Get SQL Server cluster entries
      run_module:
        ansible.windows.win_shell:
          _raw_params: 'Import-Module FailoverClusters; Foreach ($entry in (Get-Cluster | Get-ClusterResource | Where-Object {$_.ResourceType -like "SQL Server*"})) {[pscustomobject]@{cluster=$entry.Cluster.Name;name=$entry.Name;resource_type=$entry.ResourceType.Name;owner_group=$entry.OwnerGroup.Name;owner_node=$entry.OwnerNode.Name} | ConvertTo-Json -Compress}'
      register: result
      ignore_errors: yes
    - name: Process cluster entries
      block:
        - name: Format data
          set_instance_fact:
            _entry: "<< __item__ | from_json >>"
        - name: Register cluster entry
          set_instance_fact:
            _clusters: "<< __instance__._clusters | default([]) + [__instance__._entry] >>"
      loop: "<< result.stdout_lines | default([]) >>"
    - name: Add cluster entries to extra data if needed
      set_instance_fact:
        extra_data: "<< __instance__.extra_data | default({}) | combine({
                  'clusters': __instance__._clusters
                }) >>"
      when: __instance__._clusters is defined
- name: Remove temporary variables
  del_instance_fact:
    - _hostname
    - _instance
    - _databases
    - _clusters
    - _entry
